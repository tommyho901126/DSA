#include<stdio.h>
#include<stdlib.h>
const int de1=1;
typedef struct element{
	int a,b;
}unit;
int printarr(int **arr,int n){
	int i,j;
	for(i=1;i<=n;i++) for(j=1;j<=arr[i][0];j++) printf("%d ",arr[i][j]);
}
int check(int **arr,int n){
    
	int i;

	for(i=1;i<=n;i++){
	   if(de1) printf("i=%d\n",i);
	   if(arr[i][0]!=0){
	       if(de1) printf("return;\n");
	       return 0;  
	   } 
	}
	
	return 1;
}
void print_result(unit *process_u,int *process_t){
	int i,n=*process_t-1;
	printf("Yes\n");
	for(i=n;i>=0;i--) printf("%d %d\n",process_u[i].a,process_u[i].b);
}
void print_status(unit *process_u,int *process_t){
	int i,n=*process_t-1;
	for(i=n;i>=0;i--) printf("%d %d\n",process_u[i].a,process_u[i].b);
}
void DFS_visit(int **arr,int n,unit *process_u,int *process_t,int a,int b,int *stop){//when want DFS_main to end-> turn top color to 2
	if(*stop==1) return;
	if(de1) printf("now visiting (%d,%d)->(%d,%d)\n",a,b,arr[a][0],arr[b][0]);
	process_u[*process_t].a=a;
	process_u[*process_t].b=b;
	*process_t=*process_t+1;
	int i,c,d,m,insert_location=*process_t;
	arr[a][0]--;
	if(de1) printf("arr[b][0]=%d\n",arr[b][0]);
	arr[b][0]--;
	if(de1) printf("arr[b][0]=%d\n",arr[b][0]);
	if(check(arr,n)==1){
		if(de1) printf("find the ans\n");
		print_result(process_u,process_t);
		*stop=1;
		return;
	}
	else{
		if(*stop==1) return;
		d=a+1;
		c=d+1;
		m=arr[a][0];
		if(m>0) c=arr[a][m];
		if(m>0) if(arr[c][0]>0) d=arr[c][arr[c][0]];
		if(d==a&c<d){
			if(de1) printf("1st visit\n");
			DFS_visit(arr,n,process_u,process_t,c,d,stop);
    		*process_t=*process_t-1;
    		c=process_u[*process_t].a;
    		d=process_u[*process_t].b;
    		arr[c][0]++;
    		arr[d][0]++;
		} 
		
		
		if(*stop==1) return;
		d=a+1;
		c=d+1;
		m=arr[b][0];
		if(de1) printf("arr[b][0]=%d,arr[arr[b][0]]=%d\n",arr[b][0],arr[b][m]);
		if(m>0) c=arr[b][m];
		if(m>0) if(arr[c][0]>0) d=arr[c][arr[c][0]];
		if(d==b&c<d){
			if(de1) printf("2nd visit\n");
			DFS_visit(arr,n,process_u,process_t,c,d,stop);
    		*process_t=*process_t-1;
    		c=process_u[*process_t].a;
    		d=process_u[*process_t].b;
    		arr[c][0]++;
    		arr[d][0]++;
		} 
		
		
		
		if(de1) printf("3rd visit\n");
		for(i=1;i<=n;i++){
		    if(*stop==1) return;
			m=arr[i][0];
			if(m>0) c=arr[i][m];
			if(arr[c][0]>0) d=arr[c][arr[c][0]];
			if(d==i&c<d) DFS_visit(arr,n,process_u,process_t,c,d,stop);
			
			*process_t=*process_t-1;
    		c=process_u[*process_t].a;
    		d=process_u[*process_t].b;
    		arr[c][0]++;
    		arr[d][0]++;
		}
	}
}
void DFS_main(int **arr,int n,int *waiting_t,int *process_t,int *stop){
    
	int i,m,a,b,ch;
	unit process_u[200010];
	*process_t=0;
	ch=check(arr,n);
    if(ch==1&&*stop==0) printf("Yes");return;
    if(de1) printf("hello?");
	for(i=1;i<=n;i++){
	    if(de1) printf("i=%d\n",i);
		m=arr[i][0];
		if(m>0) a=arr[i][m];
		if(m>0) if(arr[a][0]>0) b=arr[a][arr[a][0]];
		if(m>0) if(b==i&&a<b) DFS_visit(arr,n,process_u,process_t,a,b,stop);
		if(*stop==1) return;
		if(de1) printf("in the end of for loop i=%d,n=%d,*process_t=%d\n",i,n,*process_t);
		if(i>=n) if(*stop==0) printf("No");return;
		if(de1)printf("safe\n");
	}
}
int main(){
	int n,i,j,k,a,b,**arr,t1=0,t2=0,t3=0;
	int *waiting_t=&t1,*process_t=&t2,*stop=&t3;
	//printf("**%d\n",*wait_t);
	arr=(int **)malloc(sizeof(int*)*100010);
	scanf("%d",&n);
	for(i=1;i<=n;i++){
		scanf("%d",&a);
		arr[i]=(int *)malloc(sizeof(int)*(a+1));
		arr[i][0]=a;
		for(j=1;j<=a;j++){
			scanf("%d",&b);
			arr[i][j]=b;
		}
	} 	
	DFS_main(arr,n,waiting_t,process_t,stop);
	return 0;
}
